@model farmaciaX.Models.Productos

@{
    ViewData["Title"] = "Producto";
    var productoId = Model.Id;
}
<div class="row" id="appVue" v-cloak>
    <div class="col-md-4">
        <h3>
            Detalles del Producto
            <div class="btn-group pull-right">
                <button class="btn btn-primary" title="Editar" v-on:click="activarEdicion" v-if="!editando_producto"><i
                        class="fas fa-edit"></i></button>
            </div>
        </h3>
        <hr />
        <form asp-action="CrearProducto" v-on:submit.prevent="guardarProducto" asp-antiforgery="true" id="formProducto">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Nombre" class="control-label"></label>
                <input asp-for="Nombre" class="form-control" :readonly="!editando_producto" v-model="producto.Nombre" />
                <span asp-validation-for="Nombre" class="text-danger" v-if="errores_producto.Nombre">{{
                    errores_producto.Nombre }}</span>
            </div>
            <div class="form-group">
                <label asp-for="Tipo" class="control-label"></label>
                <input asp-for="Tipo" class="form-control" :readonly="!editando_producto" v-model="producto.tipo" />
                <span asp-validation-for="Tipo" class="text-danger" v-if="errores_producto.Tipo">{{
                    errores_producto.Tipo }}</span>
            </div>
            <div class="form-group">
                <label asp-for="Precio" class="control-label"></label>
                <input asp-for="Precio" class="form-control" :readonly="!editando_producto" v-model="producto.precio" />
                <span asp-validation-for="Precio" class="text-danger" v-if="errores_producto.Precio">{{
                    errores_producto.Precio }}</span>
            </div>
            <div class="form-group">
                <label asp-for="Cantidad_Stock" class="control-label"></label>
                <input asp-for="Cantidad_Stock" class="form-control" :readonly="!editando_producto"
                    v-model="producto.cantidad_stock" />
                <span asp-validation-for="Cantidad_Stock" class="text-danger" v-if="errores_producto.Cantidad_Stock">{{
                    errores_producto.Cantidad_Stock }}</span>
            </div>
            <div class="form-group">
                <label asp-for="Requiere_Receta" class="control-label"></label>
                <input type="checkbox" asp-for="Requiere_Receta" class="form-control" :readonly="!editando_producto"
                    v-model="producto.requiere_receta" />

                <span asp-validation-for="Requiere_Receta" class="text-danger"
                    v-if="errores_producto.Requiere_Receta">{{ errores_producto.Requiere_Receta }}</span>
            </div>

            <div class="form-group">
                <label asp-for="Laboratorio" class="control-label"></label>
                <input asp-for="Laboratorio" class="form-control" :readonly="!editando_producto"
                    v-model="producto.laboratorio" />
                <span asp-validation-for="Laboratorio" class="text-danger" v-if="errores_producto.Laboratorio">{{
                    errores_producto.Laboratorio }}</span>
            </div>

            <div class="form-group">
                <label asp-for="Fecha_Vencimiento" class="control-label"></label>
                <input asp-for="Fecha_Vencimiento" class="form-control" :readonly="!editando_producto"
                    v-model="producto.fecha_vencimiento" />
                <span asp-validation-for="Fecha_Vencimiento" class="text-danger"
                    v-if="errores_producto.Fecha_Vencimiento">{{
                    errores_producto.Fecha_Vencimiento }}</span>
            </div>

            <div class="form-group">
                <label asp-for="Activo" class="control-label"></label>
                <input asp-for="Activo" class="form-control" :readonly="!editando_producto" v-model="producto.Activo" />
                <span asp-validation-for="Activo" class="text-danger" v-if="errores_producto.Activo">{{
                    errores_producto.Activo }}</span>

            </div>

            <div class="form-group" v-if="editando_producto">
                <button type="button" v-on:click="cancelarEdicion" class="btn btn-secondary">Cancelar</button>
                <button type="submit" class="btn btn-primary" :disabled="guardando_producto">
                    <span v-if="guardando_producto"><i class="fa fa-spinner fa-spin"></i> </span>
                    <span v-else><i class="fa fa-save"></i> </span>
                    Guardar
                </button>
            </div>
        </form>
    </div>
    <div class="col-md-8" v-if="modo_actual == modos.listado">
        <h3>
            Listado de Productos
            <div class="btn-group pull-right">
                <button class="btn btn-primary" title="Crear" v-on:click="nuevoProducto"><i
                        class="fa-solid fa-plus"></i></button>
            </div>
        </h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Tipo</th>
                    <th>Precio</th>
                    <th>Cantidad Stock</th>
                    <th>Requiere Receta</th>
                    <th>Laboratorio</th>
                    <th>Fecha Vencimiento</th>
                    <th>Activo</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="(producto, index) in productos" :key="producto.productoId">
                    <td>{{ producto.nombre }}</td>
                    <td>{{ producto.tipo }}</td>
                    <td>{{ producto.precio }}</td>
                    <td>{{ producto.cantidad_stock }}</td>
                    <td>{{ producto.requiere_receta }}</td>
                    <td>{{ producto.laboratorio }}</td>
                    <td>{{ producto.fecha_vencimiento }}</td>
                    <td>{{ producto.activo }}</td>
                    <td>
                        <div class="d-flex align-items-center">
                            <button v-on:click="editarProducto(producto)" class="btn btn-primary"><i
                                    class="fas fa-edit"></i></button>
                            @* @if (User.IsInRole("Administrador") || User.IsInRole("SuperAdministrador")) *@

                            <span>&nbsp;</span>
                            <div class="custom-control custom-switch">
                                <input type="checkbox" class="custom-control-input" :id="'habilitado_'+producto.id"
                                    v-model="producto.habilitado" @@change="cambiarEstadoproducto(index)"
                                    :disabled="guardando_producto" />
                                <label class="custom-control-label" :for="'habilitado_'+producto.id">{{
                                    producto.habilitado
                                    ? "Activo" : "Inactivo" }}</label>
                            </div>

                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <!-- Formulario para agregar/editar producto -->
    <div class="col-md-4" v-if="modo_actual == modos.edicion">
        <h3>{{ productoActual.id ? 'Editar producto' : 'Nuevo Producto' }}</h3>
        <hr />
        <form v-on:submit.prevent="guardarProducto" asp-antiforgery="true" id="formProducto">
            <div class="form-group">
                <label for="Nombre">Nombre</label>
                <input id="Nombre" v-model="productoActual.nombre" class="form-control" />
                <span class="text-danger" v-if="errores_Producto.Nombre">{{ errores_producto.Nombre }}</span>
            </div>
            <div class="form-group">
                <label for="Tipo">Tipo</label>
                <select id="Tipo" v-model="productoActual.tipo" class="form-control">
                    <option v-for="i in 10" :key="i" :value="i">{{ i }}</option>
                </select>
                <span class="text-danger" v-if="errores_producto.Tipo">{{ errores_producto.Tipo }}</span>
            </div>
            <div class="form-group">
                <label for="Precio">Precio</label>
                <input id="Precio" v-model="productoActual.Precio" class="form-control" />
                <span class="text-danger" v-if="errores_producto.Precio">{{ errores_producto.Precio }}</span>
            </div>
            <div class="form-group">
                <label for="Cantidad_Stock">Cantidad Stock</label>
                <input type="number" id="Cantidad_Stock" v-model="productoActual.cantidad_stock" class="form-control">
                @* <option v-bind:value="null">Seleccione</option>
                    <option value="Comercial">Comercial</option>
                    <option value="Residencial">Residencial</option>
                </select> *@
                <span class="text-danger" v-if="errores_producto.Cantidad_Stock">{{ errores_producto.Cantidad_Stock
                    }}</span>
            </div>
            <button type="button" v-on:click="cancelarProducto" class="btn btn-secondary">Cancelar</button>
            <button type="submit" class="btn btn-primary" :disabled="guardando_producto">
                <span v-if="guardando_producto"><i class="fa fa-spinner fa-spin"></i> </span>
                <span v-else><i class="fa fa-save"></i> </span>
                Guardar
            </button>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Volver</a>
</div>

@section Scripts {
    <script>
        const emailRegex = /^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        const productoDefault = { id: 0, productoId: @productoId, nombre: '', tipo: null, precio: 1, cantidad_stock: 0 };
        const erroresProdcutoDefault = {
            Nombre: null,
            Tipo: null,
            Precio: null,
            Cantidad_Stock: null,
            Requiere_Receta: null,
            Laboratorio: null,
            Fecha_Vencimiento: null,
            Activo: null,
        };
        const erroresProductoDefault = {
            Nombre: null,
            Tipo: null,
            Precio: null,
            Cantidad_Stock: null,
            Requiere_Receta: null,
            Laboratorio: null,
            Fecha_Vencimiento: null,
            Activo: null,
        };
        $(document).ready(() => {
            appVue = new Vue({
                el: '#appVue',
                data: {
                    modo_actual: 1,
                    modos: {
                        listado: 1,
                        edicion: 2,
                    },
                    productoId: @productoId,
                    producto: {},
                    producto_original: {},
                    errores_producto: { ...erroresProductoDefault },
                    guardando_producto: false,
                    editando_producto: false,
                    productos: [],
                    productoActual: { ...productoDefault },
                            @* errores_producto: { ...erroresProductoDefault }, *@
                @* guardando_producto: false, *@
                            },
            computed: {
        },
            methods: {
           
                async cargarProducto() {
                const response = await fetch(`/api/Productos/GetProducto/${this.productoId}`);
                const data = await response.json();
                console.log(data);
                this.producto = await response.json();
                this.producto_original = { ...this.producto };
            },
            activarEdicion() {
                this.editando_producto = true;
            },
            cancelarEdicion() {
                this.editando_producto = false;
                this.producto = { ...this.producto_original };
                this.errores_producto = { ...erroresProductoDefault };
            },
            async guardarProducto() {
                this.errores_producto = { ...erroresProductoDefault };
                if (!this.producto.nombre) {
                    this.errores_producto.Nombre = 'El nombre es requerido.';
                }
                if (!this.producto.tipo) {
                    this.errores_producto.Tipo = 'El Tipo es requerido.';
                }
                if (this.producto.precio == null || this.producto.precio <= 0) {
                    this.errores_producto.Precio = 'El precio debe ser mayor que 0.';
                }

                if (!this.producto.cantidad_stock) {
                    this.errores_producto.Cantidad_Stock = 'La cantidad es requerida.';
                }
                if (this.producto.requiere_receta === null || this.producto.requiere_receta === '') {
                    this.errores_producto.Requiere_Receta = 'Debe indicar si requiere receta.';
                }

                if (!this.producto.Laboratorio) {
                    this.errores_producto.Laboratorio = 'El laboratorio es requerido.';
                }

                if (!this.producto.Fecha_Vencimiento) {
                    this.errores_producto.Fecha_Vencimiento = 'La fecha es requerida.';
                }

                if (Object.keys(this.errores_producto).some(key => this.errores_producto[key] !== null)) {
                    notyf.error("Verifique los datos ingresados");
                    return; // Si hay errores, no continuar
                }
                this.guardando_producto = true;
                $.ajax({
                    url: `/api/Productos/CrearProducto/${this.producto.idProducto}`,
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': $('#formProducto input[name="__RequestVerificationToken"]').val()
                    },
                    data: this.producto,
                }).done((data) => {
                    this.producto = data;
                    this.editando_producto = false;
                    notyf.success(`producto guardado con éxito`);
                }).fail((jqXHR, textStatus, errorThrown) => {
                    notyf.error("Error al guardar el producto");
                    if (jqXHR.status === 400) {
                        console.log(jqXHR.responseJSON);
                        this.errores = jqXHR.responseJSON;
                    }
                }).always(() => {
                    this.guardando_producto = false;
                });
            },
            async cargarProductos() {
                const response = await fetch(`/api/Productos/GetProductos/`);
                this.productos = await response.json();
            },
            nuevoProducto() {
                this.productoActual = { ...productoDefault };
                this.modo_actual = this.modos.edicion;
            },
            editarProducto(producto) {
                this.productoActual = { ...producto }; // Copia para evitar mutación directa
                this.modo_actual = this.modos.edicion;
            },
            async guardarProducto() {
                this.errores_producto = { ...erroresProductoDefault };
                if (!this.productoActual.nombre) {
                    //this.errores_inmueble.Direccion = 'La dirección es requerida.';
                }
                if (!this.productoActual.tipo) {
                    this.errores_producto.Tipo = 'El tipo es requerido.';
                }
                if (!this.productoActual.precio) {
                    this.errores_producto.Precio = 'Los precio son requeridos.';
                }
                if (!this.productoActual.cantidad_stock) {
                    this.errores_producto.Cantidad_Stock = 'La cantidad es requerida.';
                }
                if (Object.keys(this.errores_producto).some(key => this.errores_producto[key] !== null)) {
                    notyf.error("Verifique los datos ingresados");
                    return; // Si hay errores, no continuar
                }
                this.guardando_producto = true;
                $.ajax({
                    url: `/Productos/GuardarAjax/${this.productoActual.id}`,
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': $('#formProductoinput[name="__RequestVerificationToken"]').val()
                    },
                    data: this.productoActual,
                }).done((data) => {
                    this.productos = data;
                    this.modo_actual = this.modos.listado;
                    notyf.success(`producto guardado con éxito`);
                }).fail((jqXHR, textStatus, errorThrown) => {
                    notyf.error("Error al guardar el producto");
                    if (jqXHR.status === 400) {
                        console.log(jqXHR.responseJSON);
                        Object.keys(jqXHR.responseJSON).forEach(key => {
                            this.errores_inmueble[key] = jqXHR.responseJSON[key].join(', ');
                        });
                    }
                }).always(() => {
                    this.guardando_producto = false;
                });
            },
            cancelarProducto() {
                this.modo_actual = this.modos.listado;
                this.productoActual = { ...productoDefault };
            },
            cambiarEstadoProducto(index) {
                const id = this.productos[index].id;
                this.guardando_producto = true;
                $.post(`/api/Productos/cambiarEstado/${id}`).done((data) => {
                    Object.assign(this.productos[index], data);
                    notyf.success(`Estado del producto actualizado`);
                }).fail((jqXHR, textStatus, errorThrown) => {
                    notyf.error("Error al cambiar el estado del producto");
                }).always(() => {
                    this.guardando_producto = false;
                });
            }
        },
            mounted() {
            this.cargarProducto();
            this.cargarProductos();
        }
                        });
                    })
    </script>
}