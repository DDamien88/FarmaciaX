@{
    ViewData["Title"] = "Productos";
}


<div id="app" class="container py-4">
    <h1 class="mb-4 text-success">🧪 Gestión de Productos Farmacéuticos</h1>

    <!-- Mensaje de error -->
    <div v-if="mensajeError" class="alert alert-danger">
        {{ mensajeError }}
    </div>

    <!-- Filtros -->
    <div class="row mb-3">
        <div class="col-md-6">
            <input type="text" v-model="filtro" class="form-control" placeholder="🔍 Buscar producto...">
        </div>
        <div class="col-md-6 d-flex align-items-center">
            <input type="checkbox" id="chkInactivos" v-model="mostrarInactivos" class="form-check-input me-2">
            <label for="chkInactivos" class="form-check-label">Mostrar productos dados de baja</label>
        </div>
    </div>

    <!-- Formulario -->
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-success text-white">
            {{ modoEdicion ? 'Editar Producto' : 'Nuevo Producto' }}
        </div>
        <div class="card-body">
            <form v-on:submit.prevent="guardarProducto" class="row g-3">

                <div class="col-md-6">
                    <label class="form-label">Nombre</label>
                    <input v-model="producto.nombre" class="form-control" required>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Tipo</label>
                    <input v-model="producto.tipo" class="form-control" required>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Precio</label>
                    <input v-model.number="producto.precio" type="number" step="0.01" min="0"
                        v-on:blur="formatearPrecio" class="form-control" required>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Stock</label>
                    <input v-model.number="producto.cantidad_Stock" type="number" min="0" class="form-control" required>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Laboratorio/Empresa</label>
                    <input v-model="producto.laboratorio" class="form-control" required>
                </div>

                <div class="col-md-6">
                    <label class="form-label">Fecha de Vencimiento</label>
                    <input v-model="producto.fecha_Vencimiento" type="date" class="form-control" required>
                </div>
                <div class="col-md-6 d-flex align-items-center">
                    <input type="checkbox" v-model="producto.requiere_Receta" class="form-check-input me-2">
                    <label class="form-check-label">Requiere receta médica</label>
                </div>

                <div class="col-12">
                    <button type="submit" class="btn btn-success me-2">{{ modoEdicion ? 'Guardar cambios' : 'Agregar'
                        }}</button>
                    <button type="button" v-if="modoEdicion" v-on:click="cancelarEdicion"
                        class="btn btn-secondary">Cancelar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Lista -->
    <div class="table-responsive">
        <table class="table table-bordered table-hover align-middle">
            <thead class="table-success">
                <tr>
                    <th>Nombre</th>
                    <th>Tipo</th>
                    <th>Precio</th>
                    <th>Stock</th>
                    <th>Receta</th>
                    <th>Laboratorio</th>
                    <th>Vencimiento</th>
                    <th>Activo</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="p in productosPaginados" :key="p.id">
                    <td>{{ p.nombre }}</td>
                    <td>{{ p.tipo }}</td>
                    <td>${{ typeof p.precio === 'number' ? p.precio.toLocaleString('es-AR', {minimumFractionDigits: 2,
                        maximumFractionDigits: 2}) : '0.00' }}</td>
                    <td>{{ p.cantidad_Stock }}</td>
                    <td>{{ p.requiere_Receta ? 'Sí' : 'No' }}</td>
                    <td>{{ p.laboratorio }}</td>
                    <td>{{ new Date(p.fecha_Vencimiento).toLocaleDateString() }}</td>
                    <td>
                        <span class="badge" :class="p.activo ? 'bg-success' : 'bg-secondary'">
                            {{ p.activo ? 'Sí' : 'No' }}
                        </span>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary me-1" v-on:click="editarProducto(p)">Editar</button>
                        <button class="btn btn-sm btn-warning me-1" v-on:click="darDeBaja(p)">Dar de baja</button>
                        <button class="btn btn-sm btn-success" v-on:click="activar(p)">Activar</button>
                    </td>
                </tr>
            </tbody>
        </table>

        <!-- Paginación -->
        <nav aria-label="Paginación">
            <ul class="pagination justify-content-center">
                <li class="page-item" :class="{ disabled: paginaActual === 1 }">
                    <button class="page-link" v-on:click="irPaginaAnterior()"
                        :disabled="paginaActual === 1">&laquo;</button>
                </li>

                <li class="page-item" v-for="pagina in paginasTotales" :key="pagina"
                    :class="{ active: pagina === paginaActual }">
                    <button class="page-link" v-on:click="cambiarPagina(pagina)">{{ pagina }}</button>
                </li>

                <li class="page-item" :class="{ disabled: paginaActual === paginasTotales }">
                    <button class="page-link" v-on:click="irPaginaSiguiente()"
                        :disabled="paginaActual === paginasTotales">&raquo;</button>
                </li>
            </ul>
        </nav>


    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        new Vue({
            el: '#app',
            data: {
                productos: [],
                producto: {
                    id: 0,
                    nombre: '',
                    tipo: '',
                    precio: 0,
                    cantidad_Stock: 0,
                    requiere_Receta: false,
                    laboratorio: '',
                    fecha_Vencimiento: ''
                },
                paginaActual: 1,
                itemsPorPagina: 5,
                mensajeError: '',
                modoEdicion: false,
                filtro: '',
                mostrarInactivos: false
            },
            computed: {
                productosFiltrados() {
                    return this.productos.filter(p =>
                        (this.mostrarInactivos || p.activo) &&
                        p.nombre.toLowerCase().includes(this.filtro.toLowerCase())
                    );
                },
                paginasTotales() {
                    return Math.ceil(this.productosFiltrados.length / this.itemsPorPagina);
                },
                productosPaginados() {
                    const inicio = (this.paginaActual - 1) * this.itemsPorPagina;
                    const fin = inicio + this.itemsPorPagina;
                    return this.productosFiltrados.slice(inicio, fin);
                }
            },
            methods: {
                formatearPrecio() {
                    if (this.producto.precio) {
                        this.producto.precio = parseFloat(Number(this.producto.precio).toFixed(2));
                    }
                },
                cargarProductos() {
                    axios.get('/api/productos')
                        .then(res => {
                            this.productos = res.data;
                            @* this.filtrarProductos(); *@
                                                })
                        .catch(err => console.error(err));
                },
                cambiarPagina(pagina) {
                    if (pagina >= 1 && pagina <= this.paginasTotales) {
                        this.paginaActual = pagina;
                    }
                },
                irPaginaAnterior() {
                    if (this.paginaActual > 1) {
                        this.paginaActual--;
                    }
                },
                irPaginaSiguiente() {
                    if (this.paginaActual < this.paginasTotales) {
                        this.paginaActual++;
                    }
                },
                guardarProducto() {
                    this.mensajeError = ''
                    this.formatearPrecio();
                    //this.producto.precio = Number(this.producto.precio.toFixed(2));
                    if (this.modoEdicion) {
                        axios.put(`/api/productos/${this.producto.id}`, this.producto)
                            .then(() => {
                                this.cargarProductos();
                                this.resetFormulario();
                            })
                            .catch(error => {
                                if (error.response && error.response.status === 400) {
                                    this.mensajeError = error.response.data;
                                } else {
                                    this.mensajeError = 'Error al modificar el producto.';
                                }
                            });
                    } else {
                        axios.post('/api/productos', this.producto)
                            .then(() => {
                                this.cargarProductos();
                                this.resetFormulario();
                            })
                            .catch(error => {
                                if (error.response && error.response.status === 400) {
                                    this.mensajeError = error.response.data;
                                } else {
                                    this.mensajeError = 'Error al agregar el producto.';
                                }
                            });
                    }
                },
                editarProducto(prod) {
                    this.producto = Object.assign({}, prod);
                    this.producto.fecha_Vencimiento = this.producto.fecha_Vencimiento.split('T')[0];
                    this.modoEdicion = true;
                },
                cancelarEdicion() {
                    this.resetFormulario();
                },
                resetFormulario() {
                    this.producto = {
                        id: 0,
                        nombre: '',
                        tipo: '',
                        precio: 0,
                        cantidad_Stock: 0,
                        requiere_Receta: false,
                        laboratorio: '',
                        fecha_Vencimiento: ''
                    };
                    this.modoEdicion = false;
                    this.mensajeError = '';
                },
                darDeBaja(prod) {
                    axios.delete(`/api/productos/${prod.id}`)
                        .then(() => this.cargarProductos());
                },
                activar(prod) {
                    axios.post(`/api/productos/activar/${prod.id}`)
                        .then(() => this.cargarProductos());
                },
                filtrarProductos() {
                    this.productosFiltrados = this.productos.filter(p =>
                        (this.mostrarInactivos || p.activo) &&
                        p.nombre.toLowerCase().includes(this.filtro.toLowerCase())
                    );
                }
            },
            mounted() {
                this.cargarProductos();
            }
        });

    </script>
}
