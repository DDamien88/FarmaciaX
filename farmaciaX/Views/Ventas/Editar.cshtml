@{
    ViewData["Title"] = "Editar Venta";
}

<h2>Editar Venta</h2>

<div id="appEditar">
    <div v-if="venta">
        <div class="mb-3">
            <label class="form-label">Cliente</label>
            <input type="text" class="form-control" :value="clienteNombre" disabled />
        </div>


        <div class="mb-3">
            <label class="form-label">Receta</label>
            <input type="text" class="form-control" :value="venta.recetaId ? 'ID ' + venta.recetaId : 'Sin receta'"
                disabled>
        </div>

        <h4>Productos</h4>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Cantidad</th>
                    <th>Precio</th>
                    <th>Subtotal</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="(p, index) in productos" :key="index">
                    <td>{{ p.nombre }}</td>
                    <td><input v-model.number="p.cantidad" class="form-control" /></td>
                    <td>{{ p.precio }}</td>
                    <td>{{ (p.precio * p.cantidad).toFixed(2) }}</td>
                    <td><button v-on:click="eliminarProducto(index)" class="btn btn-danger btn-sm">Quitar</button></td>
                </tr>
            </tbody>
        </table>

        <h4>Pagos</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>MÃ©todo</th>
                    <th>Monto</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="(p, i) in pagos" :key="i">
                    <td><input v-model="p.metodoPago" class="form-control" /></td>
                    <td><input v-model.number="p.monto" type="number" class="form-control" /></td>
                    <td><button v-on:click="eliminarPago(i)" class="btn btn-danger btn-sm">Eliminar</button></td>
                </tr>
            </tbody>
        </table>

        <button v-on:click="agregarPago" class="btn btn-secondary mb-3">Agregar Pago</button>

        <div class="mb-3">
            <button v-on:click="guardarCambios" class="btn btn-success">Guardar Cambios</button>
            <a href="/Ventas/Index" class="btn btn-secondary">Cancelar</a>
        </div>

        <div class="text-danger" v-if="mensajeError">{{ mensajeError }}</div>
    </div>

    <div v-else>
        <p>Cargando datos de la venta...</p>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <script>
        new Vue({
            el: "#appEditar",
            data: {
                venta: null,
                clienteId: null,
                clienteNombre: '',
                productos: [],
                pagos: [],
                mensajeError: "",
                ventaId: @ViewBag.VentaId
                                        },
            mounted() {
                axios.get(`/Ventas/Editar/${this.ventaId}`, {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                })
                    .then(response => {
                        const data = response.data;
                        this.venta = data;
                        this.clienteId = data.cliente_Id;
                        this.clienteNombre = data.clienteNombre || `Cliente ID: ${data.cliente_Id}`;
                        this.productos = data.productos;
                        this.pagos = data.pagos;
                    })
                    .catch(error => {
                        console.error("Error al cargar la venta:", error);
                        this.mensajeError = "No se pudo cargar la venta.";
                    });
            },
            methods: {
                eliminarProducto(index) {
                    this.productos.splice(index, 1);
                },
                eliminarPago(index) {
                    this.pagos.splice(index, 1);
                },
                agregarPago() {
                    this.pagos.push({ metodoPago: "", monto: 0 });
                },
                guardarCambios() {
                    const payload = {
                        id: this.venta.id,
                        clienteId: this.venta.cliente_Id,
                        recetaId: this.venta.recetaId,
                        productos: this.productos.map(p => ({
                            productoId: p.productoId,
                            cantidad: p.cantidad
                        })),
                        pagos: this.pagos
                    };

                    axios.post('/Ventas/EditarVenta', payload)
                        .then(res => {
                            window.location.href = "/Ventas/Index";
                        })
                        .catch(err => {
                            console.error("Error al guardar cambios:", err);
                            this.mensajeError = err.response?.data || "Error al guardar la venta.";
                        });
                }
            }
        });
    </script>
}
